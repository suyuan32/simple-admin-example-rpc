// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/suyuan32/simple-admin-example-rpc/ent/student"
	"github.com/suyuan32/simple-admin-example-rpc/ent/teacher"
)

// StudentCreate is the builder for creating a Student entity.
type StudentCreate struct {
	config
	mutation *StudentMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sc *StudentCreate) SetCreatedAt(t time.Time) *StudentCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *StudentCreate) SetNillableCreatedAt(t *time.Time) *StudentCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *StudentCreate) SetUpdatedAt(t time.Time) *StudentCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *StudentCreate) SetNillableUpdatedAt(t *time.Time) *StudentCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetStatus sets the "status" field.
func (sc *StudentCreate) SetStatus(u uint8) *StudentCreate {
	sc.mutation.SetStatus(u)
	return sc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sc *StudentCreate) SetNillableStatus(u *uint8) *StudentCreate {
	if u != nil {
		sc.SetStatus(*u)
	}
	return sc
}

// SetName sets the "name" field.
func (sc *StudentCreate) SetName(s string) *StudentCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetAge sets the "age" field.
func (sc *StudentCreate) SetAge(i int16) *StudentCreate {
	sc.mutation.SetAge(i)
	return sc
}

// SetAddress sets the "address" field.
func (sc *StudentCreate) SetAddress(s string) *StudentCreate {
	sc.mutation.SetAddress(s)
	return sc
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (sc *StudentCreate) SetNillableAddress(s *string) *StudentCreate {
	if s != nil {
		sc.SetAddress(*s)
	}
	return sc
}

// SetScore sets the "score" field.
func (sc *StudentCreate) SetScore(i int32) *StudentCreate {
	sc.mutation.SetScore(i)
	return sc
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (sc *StudentCreate) SetNillableScore(i *int32) *StudentCreate {
	if i != nil {
		sc.SetScore(*i)
	}
	return sc
}

// SetWeight sets the "weight" field.
func (sc *StudentCreate) SetWeight(u uint32) *StudentCreate {
	sc.mutation.SetWeight(u)
	return sc
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (sc *StudentCreate) SetNillableWeight(u *uint32) *StudentCreate {
	if u != nil {
		sc.SetWeight(*u)
	}
	return sc
}

// SetHealthy sets the "healthy" field.
func (sc *StudentCreate) SetHealthy(b bool) *StudentCreate {
	sc.mutation.SetHealthy(b)
	return sc
}

// SetNillableHealthy sets the "healthy" field if the given value is not nil.
func (sc *StudentCreate) SetNillableHealthy(b *bool) *StudentCreate {
	if b != nil {
		sc.SetHealthy(*b)
	}
	return sc
}

// SetCode sets the "code" field.
func (sc *StudentCreate) SetCode(i int64) *StudentCreate {
	sc.mutation.SetCode(i)
	return sc
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (sc *StudentCreate) SetNillableCode(i *int64) *StudentCreate {
	if i != nil {
		sc.SetCode(*i)
	}
	return sc
}

// SetIdentifyID sets the "identify_id" field.
func (sc *StudentCreate) SetIdentifyID(s string) *StudentCreate {
	sc.mutation.SetIdentifyID(s)
	return sc
}

// SetNillableIdentifyID sets the "identify_id" field if the given value is not nil.
func (sc *StudentCreate) SetNillableIdentifyID(s *string) *StudentCreate {
	if s != nil {
		sc.SetIdentifyID(*s)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *StudentCreate) SetID(u uuid.UUID) *StudentCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *StudentCreate) SetNillableID(u *uuid.UUID) *StudentCreate {
	if u != nil {
		sc.SetID(*u)
	}
	return sc
}

// AddTeacherIDs adds the "teachers" edge to the Teacher entity by IDs.
func (sc *StudentCreate) AddTeacherIDs(ids ...uint64) *StudentCreate {
	sc.mutation.AddTeacherIDs(ids...)
	return sc
}

// AddTeachers adds the "teachers" edges to the Teacher entity.
func (sc *StudentCreate) AddTeachers(t ...*Teacher) *StudentCreate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return sc.AddTeacherIDs(ids...)
}

// Mutation returns the StudentMutation object of the builder.
func (sc *StudentCreate) Mutation() *StudentMutation {
	return sc.mutation
}

// Save creates the Student in the database.
func (sc *StudentCreate) Save(ctx context.Context) (*Student, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StudentCreate) SaveX(ctx context.Context) *Student {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StudentCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StudentCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *StudentCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := student.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := student.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.Status(); !ok {
		v := student.DefaultStatus
		sc.mutation.SetStatus(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := student.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *StudentCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Student.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Student.updated_at"`)}
	}
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Student.name"`)}
	}
	if _, ok := sc.mutation.Age(); !ok {
		return &ValidationError{Name: "age", err: errors.New(`ent: missing required field "Student.age"`)}
	}
	return nil
}

func (sc *StudentCreate) sqlSave(ctx context.Context) (*Student, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *StudentCreate) createSpec() (*Student, *sqlgraph.CreateSpec) {
	var (
		_node = &Student{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(student.Table, sqlgraph.NewFieldSpec(student.FieldID, field.TypeUUID))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(student.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(student.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.Status(); ok {
		_spec.SetField(student.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(student.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.Age(); ok {
		_spec.SetField(student.FieldAge, field.TypeInt16, value)
		_node.Age = value
	}
	if value, ok := sc.mutation.Address(); ok {
		_spec.SetField(student.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := sc.mutation.Score(); ok {
		_spec.SetField(student.FieldScore, field.TypeInt32, value)
		_node.Score = value
	}
	if value, ok := sc.mutation.Weight(); ok {
		_spec.SetField(student.FieldWeight, field.TypeUint32, value)
		_node.Weight = value
	}
	if value, ok := sc.mutation.Healthy(); ok {
		_spec.SetField(student.FieldHealthy, field.TypeBool, value)
		_node.Healthy = value
	}
	if value, ok := sc.mutation.Code(); ok {
		_spec.SetField(student.FieldCode, field.TypeInt64, value)
		_node.Code = value
	}
	if value, ok := sc.mutation.IdentifyID(); ok {
		_spec.SetField(student.FieldIdentifyID, field.TypeString, value)
		_node.IdentifyID = value
	}
	if nodes := sc.mutation.TeachersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   student.TeachersTable,
			Columns: student.TeachersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(teacher.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StudentCreateBulk is the builder for creating many Student entities in bulk.
type StudentCreateBulk struct {
	config
	err      error
	builders []*StudentCreate
}

// Save creates the Student entities in the database.
func (scb *StudentCreateBulk) Save(ctx context.Context) ([]*Student, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Student, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StudentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StudentCreateBulk) SaveX(ctx context.Context) []*Student {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StudentCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StudentCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
