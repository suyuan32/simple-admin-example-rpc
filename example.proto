syntax = "proto3";

package example;
option go_package = "./example";

message BaseIDResp {
  uint64 id = 1;
  string msg = 2;
}

message BaseResp {
  string msg = 1;
}

message BaseUUIDResp {
  string id = 1;
  string msg = 2;
}

//  base message
message Empty {}

message IDReq {
  uint64 id = 1;
}

message IDsReq {
  repeated uint64 ids = 1;
}

message PageInfoReq {
  uint64 page = 1;
  uint64 page_size = 2;
}

message StudentInfo {
  optional string id = 1;
  optional int64 created_at = 2;
  optional int64 updated_at = 3;
  //  Student name | 学生姓名
  optional string name = 4;
  //  Student age | 学生年龄
  optional int32 age = 5;
  //  Student's home address | 学生家庭住址 
  optional string address = 6;
  //  Student's score | 学生分数
  optional int32 score = 7;
  //  Student's weight | 学生体重
  optional uint32 weight = 8;
  //  Whether is healthy | 是否健康
  optional bool healthy = 9;
  //  Student's code | 学生编码
  optional int64 code = 10;
}

message StudentListReq {
  uint64 page = 1;
  uint64 page_size = 2;
  optional string name = 3;
  optional string address = 4;
}

message StudentListResp {
  uint64 total = 1;
  repeated StudentInfo data = 2;
}

message TeacherInfo {
  optional uint64 id = 1;
  optional int64 created_at = 2;
  optional int64 updated_at = 3;
  //  Teacher's name | 教师姓名
  optional string name = 4;
  //  Teacher's age | 教师年龄
  optional int32 age = 5;
}

message TeacherListReq {
  uint64 page = 1;
  uint64 page_size = 2;
  optional string name = 3;
}

message TeacherListResp {
  uint64 total = 1;
  repeated TeacherInfo data = 2;
}

message UUIDReq {
  string id = 1;
}

message UUIDsReq {
  repeated string ids = 1;
}

service Example {
  //  group: base
  rpc initDatabase(Empty) returns (BaseResp);
  //  Student management
  //  group: student
  rpc createStudent(StudentInfo) returns (BaseUUIDResp);
  //  group: student
  rpc updateStudent(StudentInfo) returns (BaseResp);
  //  group: student
  rpc getStudentList(StudentListReq) returns (StudentListResp);
  //  group: student
  rpc getStudentById(UUIDReq) returns (StudentInfo);
  //  group: student
  rpc deleteStudent(UUIDsReq) returns (BaseResp);
  //  Teacher management
  //  group: teacher
  rpc createTeacher(TeacherInfo) returns (BaseIDResp);
  //  group: teacher
  rpc updateTeacher(TeacherInfo) returns (BaseResp);
  //  group: teacher
  rpc getTeacherList(TeacherListReq) returns (TeacherListResp);
  //  group: teacher
  rpc getTeacherById(IDReq) returns (TeacherInfo);
  //  group: teacher
  rpc deleteTeacher(IDsReq) returns (BaseResp);
}

